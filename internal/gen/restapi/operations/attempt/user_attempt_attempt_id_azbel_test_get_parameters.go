// Code generated by go-swagger; DO NOT EDIT.

package attempt

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewUserAttemptAttemptIDAzbelTestGetParams creates a new UserAttemptAttemptIDAzbelTestGetParams object
// no default values defined in spec.
func NewUserAttemptAttemptIDAzbelTestGetParams() UserAttemptAttemptIDAzbelTestGetParams {

	return UserAttemptAttemptIDAzbelTestGetParams{}
}

// UserAttemptAttemptIDAzbelTestGetParams contains all the bound params for the user attempt attempt Id azbel test get operation
// typically these are obtained from a http.Request
//
// swagger:parameters user_attempt_attemptId_azbel_test_get
type UserAttemptAttemptIDAzbelTestGetParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*jwt access auth
	  Required: true
	  In: header
	*/
	Authorization string
	/*Id попытки
	  Required: true
	  In: path
	*/
	AttemptID uint64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewUserAttemptAttemptIDAzbelTestGetParams() beforehand.
func (o *UserAttemptAttemptIDAzbelTestGetParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := o.bindAuthorization(r.Header[http.CanonicalHeaderKey("Authorization")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	rAttemptID, rhkAttemptID, _ := route.Params.GetOK("attempt_id")
	if err := o.bindAttemptID(rAttemptID, rhkAttemptID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAuthorization binds and validates parameter Authorization from header.
func (o *UserAttemptAttemptIDAzbelTestGetParams) bindAuthorization(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("Authorization", "header", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("Authorization", "header", raw); err != nil {
		return err
	}

	o.Authorization = raw

	return nil
}

// bindAttemptID binds and validates parameter AttemptID from path.
func (o *UserAttemptAttemptIDAzbelTestGetParams) bindAttemptID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertUint64(raw)
	if err != nil {
		return errors.InvalidType("attempt_id", "path", "uint64", raw)
	}
	o.AttemptID = value

	return nil
}
