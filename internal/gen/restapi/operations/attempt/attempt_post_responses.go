// Code generated by go-swagger; DO NOT EDIT.

package attempt

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"mgtu/digital-trace/main-backend-service/internal/gen/models"
)

// AttemptPostOKCode is the HTTP code returned for type AttemptPostOK
const AttemptPostOKCode int = 200

/*
AttemptPostOK OK

swagger:response attemptPostOK
*/
type AttemptPostOK struct {
}

// NewAttemptPostOK creates AttemptPostOK with default headers values
func NewAttemptPostOK() *AttemptPostOK {

	return &AttemptPostOK{}
}

// WriteResponse to the client
func (o *AttemptPostOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// AttemptPostInternalServerErrorCode is the HTTP code returned for type AttemptPostInternalServerError
const AttemptPostInternalServerErrorCode int = 500

/*
AttemptPostInternalServerError Ошибка сервера

swagger:response attemptPostInternalServerError
*/
type AttemptPostInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error500 `json:"body,omitempty"`
}

// NewAttemptPostInternalServerError creates AttemptPostInternalServerError with default headers values
func NewAttemptPostInternalServerError() *AttemptPostInternalServerError {

	return &AttemptPostInternalServerError{}
}

// WithPayload adds the payload to the attempt post internal server error response
func (o *AttemptPostInternalServerError) WithPayload(payload *models.Error500) *AttemptPostInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the attempt post internal server error response
func (o *AttemptPostInternalServerError) SetPayload(payload *models.Error500) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AttemptPostInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
