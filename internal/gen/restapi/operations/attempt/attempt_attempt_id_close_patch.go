// Code generated by go-swagger; DO NOT EDIT.

package attempt

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// AttemptAttemptIDClosePatchHandlerFunc turns a function with the right signature into a attempt attempt Id close patch handler
type AttemptAttemptIDClosePatchHandlerFunc func(AttemptAttemptIDClosePatchParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AttemptAttemptIDClosePatchHandlerFunc) Handle(params AttemptAttemptIDClosePatchParams) middleware.Responder {
	return fn(params)
}

// AttemptAttemptIDClosePatchHandler interface for that can handle valid attempt attempt Id close patch params
type AttemptAttemptIDClosePatchHandler interface {
	Handle(AttemptAttemptIDClosePatchParams) middleware.Responder
}

// NewAttemptAttemptIDClosePatch creates a new http.Handler for the attempt attempt Id close patch operation
func NewAttemptAttemptIDClosePatch(ctx *middleware.Context, handler AttemptAttemptIDClosePatchHandler) *AttemptAttemptIDClosePatch {
	return &AttemptAttemptIDClosePatch{Context: ctx, Handler: handler}
}

/*
AttemptAttemptIDClosePatch swagger:route PATCH /attempt/{attempt_id}/close attempt attemptAttemptIdClosePatch

Запрос на обработку ответов по попытке и её закрытие
*/
type AttemptAttemptIDClosePatch struct {
	Context *middleware.Context
	Handler AttemptAttemptIDClosePatchHandler
}

func (o *AttemptAttemptIDClosePatch) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAttemptAttemptIDClosePatchParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
