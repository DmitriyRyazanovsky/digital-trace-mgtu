// Code generated by go-swagger; DO NOT EDIT.

package attempt

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UserAttemptAttemptIDAzbelTestGetHandlerFunc turns a function with the right signature into a user attempt attempt Id azbel test get handler
type UserAttemptAttemptIDAzbelTestGetHandlerFunc func(UserAttemptAttemptIDAzbelTestGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UserAttemptAttemptIDAzbelTestGetHandlerFunc) Handle(params UserAttemptAttemptIDAzbelTestGetParams) middleware.Responder {
	return fn(params)
}

// UserAttemptAttemptIDAzbelTestGetHandler interface for that can handle valid user attempt attempt Id azbel test get params
type UserAttemptAttemptIDAzbelTestGetHandler interface {
	Handle(UserAttemptAttemptIDAzbelTestGetParams) middleware.Responder
}

// NewUserAttemptAttemptIDAzbelTestGet creates a new http.Handler for the user attempt attempt Id azbel test get operation
func NewUserAttemptAttemptIDAzbelTestGet(ctx *middleware.Context, handler UserAttemptAttemptIDAzbelTestGetHandler) *UserAttemptAttemptIDAzbelTestGet {
	return &UserAttemptAttemptIDAzbelTestGet{Context: ctx, Handler: handler}
}

/*
UserAttemptAttemptIDAzbelTestGet swagger:route GET /user/attempt/{attempt_id}/azbel_test attempt userAttemptAttemptIdAzbelTestGet

Запрос на получение ответов на тест интересов от азбеля
*/
type UserAttemptAttemptIDAzbelTestGet struct {
	Context *middleware.Context
	Handler UserAttemptAttemptIDAzbelTestGetHandler
}

func (o *UserAttemptAttemptIDAzbelTestGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUserAttemptAttemptIDAzbelTestGetParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
