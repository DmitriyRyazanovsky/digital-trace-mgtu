// Code generated by go-swagger; DO NOT EDIT.

package logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LogsGetHandlerFunc turns a function with the right signature into a logs get handler
type LogsGetHandlerFunc func(LogsGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn LogsGetHandlerFunc) Handle(params LogsGetParams) middleware.Responder {
	return fn(params)
}

// LogsGetHandler interface for that can handle valid logs get params
type LogsGetHandler interface {
	Handle(LogsGetParams) middleware.Responder
}

// NewLogsGet creates a new http.Handler for the logs get operation
func NewLogsGet(ctx *middleware.Context, handler LogsGetHandler) *LogsGet {
	return &LogsGet{Context: ctx, Handler: handler}
}

/*
	LogsGet swagger:route GET /logs logs logsGet

Получить логи сервиса
*/
type LogsGet struct {
	Context *middleware.Context
	Handler LogsGetHandler
}

func (o *LogsGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewLogsGetParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// LogsGetOKBodyItems0 logs get o k body items0
//
// swagger:model LogsGetOKBodyItems0
type LogsGetOKBodyItems0 struct {

	// level
	Level string `json:"level,omitempty"`

	// msg
	Msg string `json:"msg,omitempty"`

	// time
	Time string `json:"time,omitempty"`
}

// Validate validates this logs get o k body items0
func (o *LogsGetOKBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this logs get o k body items0 based on context it is used
func (o *LogsGetOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LogsGetOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LogsGetOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res LogsGetOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
