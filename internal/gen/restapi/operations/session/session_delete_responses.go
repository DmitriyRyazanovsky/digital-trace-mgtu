// Code generated by go-swagger; DO NOT EDIT.

package session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"mgtu/digital-trace/main-backend-service/internal/gen/models"
)

// SessionDeleteOKCode is the HTTP code returned for type SessionDeleteOK
const SessionDeleteOKCode int = 200

/*
SessionDeleteOK Успешное выполнение операции

swagger:response sessionDeleteOK
*/
type SessionDeleteOK struct {
}

// NewSessionDeleteOK creates SessionDeleteOK with default headers values
func NewSessionDeleteOK() *SessionDeleteOK {

	return &SessionDeleteOK{}
}

// WriteResponse to the client
func (o *SessionDeleteOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// SessionDeleteInternalServerErrorCode is the HTTP code returned for type SessionDeleteInternalServerError
const SessionDeleteInternalServerErrorCode int = 500

/*
SessionDeleteInternalServerError Ошибка сервера

swagger:response sessionDeleteInternalServerError
*/
type SessionDeleteInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error500 `json:"body,omitempty"`
}

// NewSessionDeleteInternalServerError creates SessionDeleteInternalServerError with default headers values
func NewSessionDeleteInternalServerError() *SessionDeleteInternalServerError {

	return &SessionDeleteInternalServerError{}
}

// WithPayload adds the payload to the session delete internal server error response
func (o *SessionDeleteInternalServerError) WithPayload(payload *models.Error500) *SessionDeleteInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the session delete internal server error response
func (o *SessionDeleteInternalServerError) SetPayload(payload *models.Error500) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SessionDeleteInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
