// Code generated by go-swagger; DO NOT EDIT.

package session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SessionDeleteHandlerFunc turns a function with the right signature into a session delete handler
type SessionDeleteHandlerFunc func(SessionDeleteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SessionDeleteHandlerFunc) Handle(params SessionDeleteParams) middleware.Responder {
	return fn(params)
}

// SessionDeleteHandler interface for that can handle valid session delete params
type SessionDeleteHandler interface {
	Handle(SessionDeleteParams) middleware.Responder
}

// NewSessionDelete creates a new http.Handler for the session delete operation
func NewSessionDelete(ctx *middleware.Context, handler SessionDeleteHandler) *SessionDelete {
	return &SessionDelete{Context: ctx, Handler: handler}
}

/*
SessionDelete swagger:route DELETE /session session sessionDelete

Запрос на удаление сессии по refresh токену
*/
type SessionDelete struct {
	Context *middleware.Context
	Handler SessionDeleteHandler
}

func (o *SessionDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSessionDeleteParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SessionDeleteBody session delete body
//
// swagger:model SessionDeleteBody
type SessionDeleteBody struct {

	// refresh token
	RefreshToken string `json:"refresh_token,omitempty"`
}

// Validate validates this session delete body
func (o *SessionDeleteBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SessionDeleteBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SessionDeleteBody) UnmarshalBinary(b []byte) error {
	var res SessionDeleteBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
