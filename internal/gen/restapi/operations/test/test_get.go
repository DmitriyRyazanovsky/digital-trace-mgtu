// Code generated by go-swagger; DO NOT EDIT.

package test

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TestGetHandlerFunc turns a function with the right signature into a test get handler
type TestGetHandlerFunc func(TestGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TestGetHandlerFunc) Handle(params TestGetParams) middleware.Responder {
	return fn(params)
}

// TestGetHandler interface for that can handle valid test get params
type TestGetHandler interface {
	Handle(TestGetParams) middleware.Responder
}

// NewTestGet creates a new http.Handler for the test get operation
func NewTestGet(ctx *middleware.Context, handler TestGetHandler) *TestGet {
	return &TestGet{Context: ctx, Handler: handler}
}

/*
	TestGet swagger:route GET /test test testGet

Вернуть главную информацию по тестам
*/
type TestGet struct {
	Context *middleware.Context
	Handler TestGetHandler
}

func (o *TestGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewTestGetParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// TestGetOKBodyItems0 test get o k body items0
//
// swagger:model TestGetOKBodyItems0
type TestGetOKBodyItems0 struct {

	// content
	Content string `json:"content,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// test id
	TestID uint64 `json:"test_id,omitempty"`
}

// Validate validates this test get o k body items0
func (o *TestGetOKBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this test get o k body items0 based on context it is used
func (o *TestGetOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *TestGetOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TestGetOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res TestGetOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
