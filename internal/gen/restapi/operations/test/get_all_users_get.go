// Code generated by go-swagger; DO NOT EDIT.

package test

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetAllUsersGetHandlerFunc turns a function with the right signature into a get all users get handler
type GetAllUsersGetHandlerFunc func(GetAllUsersGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAllUsersGetHandlerFunc) Handle(params GetAllUsersGetParams) middleware.Responder {
	return fn(params)
}

// GetAllUsersGetHandler interface for that can handle valid get all users get params
type GetAllUsersGetHandler interface {
	Handle(GetAllUsersGetParams) middleware.Responder
}

// NewGetAllUsersGet creates a new http.Handler for the get all users get operation
func NewGetAllUsersGet(ctx *middleware.Context, handler GetAllUsersGetHandler) *GetAllUsersGet {
	return &GetAllUsersGet{Context: ctx, Handler: handler}
}

/*
	GetAllUsersGet swagger:route GET /get_all_users test getAllUsersGet

Полуение всех пользователей
*/
type GetAllUsersGet struct {
	Context *middleware.Context
	Handler GetAllUsersGetHandler
}

func (o *GetAllUsersGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetAllUsersGetParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetAllUsersGetOKBodyItems0 get all users get o k body items0
//
// swagger:model GetAllUsersGetOKBodyItems0
type GetAllUsersGetOKBodyItems0 struct {

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// id
	// Minimum: 5
	ID uint64 `json:"id,omitempty"`

	// login
	Login string `json:"login,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// role Id
	RoleID uint64 `json:"roleId,omitempty"`

	// surname
	Surname string `json:"surname,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
}

// Validate validates this get all users get o k body items0
func (o *GetAllUsersGetOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllUsersGetOKBodyItems0) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetAllUsersGetOKBodyItems0) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetAllUsersGetOKBodyItems0) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MinimumUint("id", "body", o.ID, 5, false); err != nil {
		return err
	}

	return nil
}

func (o *GetAllUsersGetOKBodyItems0) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", o.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get all users get o k body items0 based on context it is used
func (o *GetAllUsersGetOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllUsersGetOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllUsersGetOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetAllUsersGetOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
