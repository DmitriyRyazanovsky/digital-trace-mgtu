// Code generated by go-swagger; DO NOT EDIT.

package achievement

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserAchievementPostHandlerFunc turns a function with the right signature into a user achievement post handler
type UserAchievementPostHandlerFunc func(UserAchievementPostParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UserAchievementPostHandlerFunc) Handle(params UserAchievementPostParams) middleware.Responder {
	return fn(params)
}

// UserAchievementPostHandler interface for that can handle valid user achievement post params
type UserAchievementPostHandler interface {
	Handle(UserAchievementPostParams) middleware.Responder
}

// NewUserAchievementPost creates a new http.Handler for the user achievement post operation
func NewUserAchievementPost(ctx *middleware.Context, handler UserAchievementPostHandler) *UserAchievementPost {
	return &UserAchievementPost{Context: ctx, Handler: handler}
}

/*
UserAchievementPost swagger:route POST /user/achievement achievement userAchievementPost

Запрос на добавление достижения пользователю
*/
type UserAchievementPost struct {
	Context *middleware.Context
	Handler UserAchievementPostHandler
}

func (o *UserAchievementPost) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUserAchievementPostParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UserAchievementPostBody user achievement post body
//
// swagger:model UserAchievementPostBody
type UserAchievementPostBody struct {

	// achive types
	AchiveTypes []*int64 `json:"achive_types"`

	// image
	Image string `json:"image,omitempty"`
}

// Validate validates this user achievement post body
func (o *UserAchievementPostBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAchiveTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UserAchievementPostBody) validateAchiveTypes(formats strfmt.Registry) error {

	if swag.IsZero(o.AchiveTypes) { // not required
		return nil
	}

	for i := 0; i < len(o.AchiveTypes); i++ {
		if swag.IsZero(o.AchiveTypes[i]) { // not required
			continue
		}

		if err := validate.MinimumInt("body"+"."+"achive_types"+"."+strconv.Itoa(i), "body", int64(*o.AchiveTypes[i]), 0, false); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UserAchievementPostBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserAchievementPostBody) UnmarshalBinary(b []byte) error {
	var res UserAchievementPostBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
