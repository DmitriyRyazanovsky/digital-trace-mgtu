// Code generated by go-swagger; DO NOT EDIT.

package achievement

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewAchievementTypeGetParams creates a new AchievementTypeGetParams object
// no default values defined in spec.
func NewAchievementTypeGetParams() AchievementTypeGetParams {

	return AchievementTypeGetParams{}
}

// AchievementTypeGetParams contains all the bound params for the achievement type get operation
// typically these are obtained from a http.Request
//
// swagger:parameters achievementTypeGet
type AchievementTypeGetParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Поиск по id типа достижения
	  In: query
	*/
	AchiveID *uint64
	/*Поиск по имени типа достижения
	  In: query
	*/
	Name *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewAchievementTypeGetParams() beforehand.
func (o *AchievementTypeGetParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qAchiveID, qhkAchiveID, _ := qs.GetOK("achive_id")
	if err := o.bindAchiveID(qAchiveID, qhkAchiveID, route.Formats); err != nil {
		res = append(res, err)
	}

	qName, qhkName, _ := qs.GetOK("name")
	if err := o.bindName(qName, qhkName, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAchiveID binds and validates parameter AchiveID from query.
func (o *AchievementTypeGetParams) bindAchiveID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertUint64(raw)
	if err != nil {
		return errors.InvalidType("achive_id", "query", "uint64", raw)
	}
	o.AchiveID = &value

	return nil
}

// bindName binds and validates parameter Name from query.
func (o *AchievementTypeGetParams) bindName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Name = &raw

	return nil
}
