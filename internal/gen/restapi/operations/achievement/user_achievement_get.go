// Code generated by go-swagger; DO NOT EDIT.

package achievement

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserAchievementGetHandlerFunc turns a function with the right signature into a user achievement get handler
type UserAchievementGetHandlerFunc func(UserAchievementGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UserAchievementGetHandlerFunc) Handle(params UserAchievementGetParams) middleware.Responder {
	return fn(params)
}

// UserAchievementGetHandler interface for that can handle valid user achievement get params
type UserAchievementGetHandler interface {
	Handle(UserAchievementGetParams) middleware.Responder
}

// NewUserAchievementGet creates a new http.Handler for the user achievement get operation
func NewUserAchievementGet(ctx *middleware.Context, handler UserAchievementGetHandler) *UserAchievementGet {
	return &UserAchievementGet{Context: ctx, Handler: handler}
}

/*
UserAchievementGet swagger:route GET /user/achievement achievement userAchievementGet

Запрос на получение информации о достижениях пользователя
*/
type UserAchievementGet struct {
	Context *middleware.Context
	Handler UserAchievementGetHandler
}

func (o *UserAchievementGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUserAchievementGetParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UserAchievementGetOKBodyItems0 user achievement get o k body items0
//
// swagger:model UserAchievementGetOKBodyItems0
type UserAchievementGetOKBodyItems0 struct {

	// achievement id
	AchievementID uint64 `json:"achievement_id,omitempty"`

	// achievement types
	AchievementTypes []*UserAchievementGetOKBodyItems0AchievementTypesItems0 `json:"achievement_types"`
}

// Validate validates this user achievement get o k body items0
func (o *UserAchievementGetOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAchievementTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UserAchievementGetOKBodyItems0) validateAchievementTypes(formats strfmt.Registry) error {

	if swag.IsZero(o.AchievementTypes) { // not required
		return nil
	}

	for i := 0; i < len(o.AchievementTypes); i++ {
		if swag.IsZero(o.AchievementTypes[i]) { // not required
			continue
		}

		if o.AchievementTypes[i] != nil {
			if err := o.AchievementTypes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("achievement_types" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UserAchievementGetOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserAchievementGetOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res UserAchievementGetOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UserAchievementGetOKBodyItems0AchievementTypesItems0 user achievement get o k body items0 achievement types items0
//
// swagger:model UserAchievementGetOKBodyItems0AchievementTypesItems0
type UserAchievementGetOKBodyItems0AchievementTypesItems0 struct {

	// achievement type id
	// Minimum: 0
	AchievementTypeID *int64 `json:"achievement_type_id,omitempty"`
}

// Validate validates this user achievement get o k body items0 achievement types items0
func (o *UserAchievementGetOKBodyItems0AchievementTypesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAchievementTypeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UserAchievementGetOKBodyItems0AchievementTypesItems0) validateAchievementTypeID(formats strfmt.Registry) error {

	if swag.IsZero(o.AchievementTypeID) { // not required
		return nil
	}

	if err := validate.MinimumInt("achievement_type_id", "body", int64(*o.AchievementTypeID), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UserAchievementGetOKBodyItems0AchievementTypesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserAchievementGetOKBodyItems0AchievementTypesItems0) UnmarshalBinary(b []byte) error {
	var res UserAchievementGetOKBodyItems0AchievementTypesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
