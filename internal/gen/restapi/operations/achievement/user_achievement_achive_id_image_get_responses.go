// Code generated by go-swagger; DO NOT EDIT.

package achievement

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"mgtu/digital-trace/main-backend-service/internal/gen/models"
)

// UserAchievementAchiveIDImageGetOKCode is the HTTP code returned for type UserAchievementAchiveIDImageGetOK
const UserAchievementAchiveIDImageGetOKCode int = 200

/*
UserAchievementAchiveIDImageGetOK Изображение успешно получено

swagger:response userAchievementAchiveIdImageGetOK
*/
type UserAchievementAchiveIDImageGetOK struct {
	/*File name

	 */
	ContentDisposition string `json:"Content-Disposition"`

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewUserAchievementAchiveIDImageGetOK creates UserAchievementAchiveIDImageGetOK with default headers values
func NewUserAchievementAchiveIDImageGetOK() *UserAchievementAchiveIDImageGetOK {

	return &UserAchievementAchiveIDImageGetOK{}
}

// WithContentDisposition adds the contentDisposition to the user achievement achive Id image get o k response
func (o *UserAchievementAchiveIDImageGetOK) WithContentDisposition(contentDisposition string) *UserAchievementAchiveIDImageGetOK {
	o.ContentDisposition = contentDisposition
	return o
}

// SetContentDisposition sets the contentDisposition to the user achievement achive Id image get o k response
func (o *UserAchievementAchiveIDImageGetOK) SetContentDisposition(contentDisposition string) {
	o.ContentDisposition = contentDisposition
}

// WithPayload adds the payload to the user achievement achive Id image get o k response
func (o *UserAchievementAchiveIDImageGetOK) WithPayload(payload string) *UserAchievementAchiveIDImageGetOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user achievement achive Id image get o k response
func (o *UserAchievementAchiveIDImageGetOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserAchievementAchiveIDImageGetOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Content-Disposition

	contentDisposition := o.ContentDisposition
	if contentDisposition != "" {
		rw.Header().Set("Content-Disposition", contentDisposition)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// UserAchievementAchiveIDImageGetInternalServerErrorCode is the HTTP code returned for type UserAchievementAchiveIDImageGetInternalServerError
const UserAchievementAchiveIDImageGetInternalServerErrorCode int = 500

/*
UserAchievementAchiveIDImageGetInternalServerError Ошибка сервера либо запроса

swagger:response userAchievementAchiveIdImageGetInternalServerError
*/
type UserAchievementAchiveIDImageGetInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error500 `json:"body,omitempty"`
}

// NewUserAchievementAchiveIDImageGetInternalServerError creates UserAchievementAchiveIDImageGetInternalServerError with default headers values
func NewUserAchievementAchiveIDImageGetInternalServerError() *UserAchievementAchiveIDImageGetInternalServerError {

	return &UserAchievementAchiveIDImageGetInternalServerError{}
}

// WithPayload adds the payload to the user achievement achive Id image get internal server error response
func (o *UserAchievementAchiveIDImageGetInternalServerError) WithPayload(payload *models.Error500) *UserAchievementAchiveIDImageGetInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user achievement achive Id image get internal server error response
func (o *UserAchievementAchiveIDImageGetInternalServerError) SetPayload(payload *models.Error500) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserAchievementAchiveIDImageGetInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
