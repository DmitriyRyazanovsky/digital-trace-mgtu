// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AuthPostHandlerFunc turns a function with the right signature into a auth post handler
type AuthPostHandlerFunc func(AuthPostParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AuthPostHandlerFunc) Handle(params AuthPostParams) middleware.Responder {
	return fn(params)
}

// AuthPostHandler interface for that can handle valid auth post params
type AuthPostHandler interface {
	Handle(AuthPostParams) middleware.Responder
}

// NewAuthPost creates a new http.Handler for the auth post operation
func NewAuthPost(ctx *middleware.Context, handler AuthPostHandler) *AuthPost {
	return &AuthPost{Context: ctx, Handler: handler}
}

/*
AuthPost swagger:route POST /auth auth authPost

Запрос на аутентификацию пользователя
*/
type AuthPost struct {
	Context *middleware.Context
	Handler AuthPostHandler
}

func (o *AuthPost) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAuthPostParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// AuthPostBody auth post body
//
// swagger:model AuthPostBody
type AuthPostBody struct {

	// email
	Email string `json:"email,omitempty"`

	// password
	Password string `json:"password,omitempty"`
}

// Validate validates this auth post body
func (o *AuthPostBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AuthPostBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AuthPostBody) UnmarshalBinary(b []byte) error {
	var res AuthPostBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AuthPostOKBody auth post o k body
//
// swagger:model AuthPostOKBody
type AuthPostOKBody struct {

	// access token
	AccessToken string `json:"access_token,omitempty"`

	// refresh token
	RefreshToken string `json:"refresh_token,omitempty"`
}

// Validate validates this auth post o k body
func (o *AuthPostOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AuthPostOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AuthPostOKBody) UnmarshalBinary(b []byte) error {
	var res AuthPostOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
