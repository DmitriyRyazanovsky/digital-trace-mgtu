// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"mgtu/digital-trace/main-backend-service/internal/gen/models"
)

// UserAvatarPutOKCode is the HTTP code returned for type UserAvatarPutOK
const UserAvatarPutOKCode int = 200

/*
UserAvatarPutOK ОК

swagger:response userAvatarPutOK
*/
type UserAvatarPutOK struct {
}

// NewUserAvatarPutOK creates UserAvatarPutOK with default headers values
func NewUserAvatarPutOK() *UserAvatarPutOK {

	return &UserAvatarPutOK{}
}

// WriteResponse to the client
func (o *UserAvatarPutOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// UserAvatarPutInternalServerErrorCode is the HTTP code returned for type UserAvatarPutInternalServerError
const UserAvatarPutInternalServerErrorCode int = 500

/*
UserAvatarPutInternalServerError Ошибка сервера либо запроса

swagger:response userAvatarPutInternalServerError
*/
type UserAvatarPutInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error500 `json:"body,omitempty"`
}

// NewUserAvatarPutInternalServerError creates UserAvatarPutInternalServerError with default headers values
func NewUserAvatarPutInternalServerError() *UserAvatarPutInternalServerError {

	return &UserAvatarPutInternalServerError{}
}

// WithPayload adds the payload to the user avatar put internal server error response
func (o *UserAvatarPutInternalServerError) WithPayload(payload *models.Error500) *UserAvatarPutInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user avatar put internal server error response
func (o *UserAvatarPutInternalServerError) SetPayload(payload *models.Error500) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserAvatarPutInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
