// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UserAvatarGetHandlerFunc turns a function with the right signature into a user avatar get handler
type UserAvatarGetHandlerFunc func(UserAvatarGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UserAvatarGetHandlerFunc) Handle(params UserAvatarGetParams) middleware.Responder {
	return fn(params)
}

// UserAvatarGetHandler interface for that can handle valid user avatar get params
type UserAvatarGetHandler interface {
	Handle(UserAvatarGetParams) middleware.Responder
}

// NewUserAvatarGet creates a new http.Handler for the user avatar get operation
func NewUserAvatarGet(ctx *middleware.Context, handler UserAvatarGetHandler) *UserAvatarGet {
	return &UserAvatarGet{Context: ctx, Handler: handler}
}

/*
UserAvatarGet swagger:route GET /user/avatar user userAvatarGet

Запрос на добавление фотографии пользователя
*/
type UserAvatarGet struct {
	Context *middleware.Context
	Handler UserAvatarGetHandler
}

func (o *UserAvatarGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUserAvatarGetParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
