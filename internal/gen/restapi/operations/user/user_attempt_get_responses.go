// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"mgtu/digital-trace/main-backend-service/internal/gen/models"
)

// UserAttemptGetOKCode is the HTTP code returned for type UserAttemptGetOK
const UserAttemptGetOKCode int = 200

/*
UserAttemptGetOK OK

swagger:response userAttemptGetOK
*/
type UserAttemptGetOK struct {

	/*
	  In: Body
	*/
	Payload []*UserAttemptGetOKBodyItems0 `json:"body,omitempty"`
}

// NewUserAttemptGetOK creates UserAttemptGetOK with default headers values
func NewUserAttemptGetOK() *UserAttemptGetOK {

	return &UserAttemptGetOK{}
}

// WithPayload adds the payload to the user attempt get o k response
func (o *UserAttemptGetOK) WithPayload(payload []*UserAttemptGetOKBodyItems0) *UserAttemptGetOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user attempt get o k response
func (o *UserAttemptGetOK) SetPayload(payload []*UserAttemptGetOKBodyItems0) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserAttemptGetOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*UserAttemptGetOKBodyItems0, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// UserAttemptGetInternalServerErrorCode is the HTTP code returned for type UserAttemptGetInternalServerError
const UserAttemptGetInternalServerErrorCode int = 500

/*
UserAttemptGetInternalServerError Ошибка сервера

swagger:response userAttemptGetInternalServerError
*/
type UserAttemptGetInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error500 `json:"body,omitempty"`
}

// NewUserAttemptGetInternalServerError creates UserAttemptGetInternalServerError with default headers values
func NewUserAttemptGetInternalServerError() *UserAttemptGetInternalServerError {

	return &UserAttemptGetInternalServerError{}
}

// WithPayload adds the payload to the user attempt get internal server error response
func (o *UserAttemptGetInternalServerError) WithPayload(payload *models.Error500) *UserAttemptGetInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user attempt get internal server error response
func (o *UserAttemptGetInternalServerError) SetPayload(payload *models.Error500) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserAttemptGetInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
