// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UserAttemptAttemptIDKlimovTestGetHandlerFunc turns a function with the right signature into a user attempt attempt Id klimov test get handler
type UserAttemptAttemptIDKlimovTestGetHandlerFunc func(UserAttemptAttemptIDKlimovTestGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UserAttemptAttemptIDKlimovTestGetHandlerFunc) Handle(params UserAttemptAttemptIDKlimovTestGetParams) middleware.Responder {
	return fn(params)
}

// UserAttemptAttemptIDKlimovTestGetHandler interface for that can handle valid user attempt attempt Id klimov test get params
type UserAttemptAttemptIDKlimovTestGetHandler interface {
	Handle(UserAttemptAttemptIDKlimovTestGetParams) middleware.Responder
}

// NewUserAttemptAttemptIDKlimovTestGet creates a new http.Handler for the user attempt attempt Id klimov test get operation
func NewUserAttemptAttemptIDKlimovTestGet(ctx *middleware.Context, handler UserAttemptAttemptIDKlimovTestGetHandler) *UserAttemptAttemptIDKlimovTestGet {
	return &UserAttemptAttemptIDKlimovTestGet{Context: ctx, Handler: handler}
}

/*
	UserAttemptAttemptIDKlimovTestGet swagger:route GET /user/attempt/{attempt_id}/klimov_test user userAttemptAttemptIdKlimovTestGet

Запрос на получение ответов на тест климова от пользователя
*/
type UserAttemptAttemptIDKlimovTestGet struct {
	Context *middleware.Context
	Handler UserAttemptAttemptIDKlimovTestGetHandler
}

func (o *UserAttemptAttemptIDKlimovTestGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUserAttemptAttemptIDKlimovTestGetParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
