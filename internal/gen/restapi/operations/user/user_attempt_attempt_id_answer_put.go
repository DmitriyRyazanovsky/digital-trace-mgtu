// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserAttemptAttemptIDAnswerPutHandlerFunc turns a function with the right signature into a user attempt attempt Id answer put handler
type UserAttemptAttemptIDAnswerPutHandlerFunc func(UserAttemptAttemptIDAnswerPutParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UserAttemptAttemptIDAnswerPutHandlerFunc) Handle(params UserAttemptAttemptIDAnswerPutParams) middleware.Responder {
	return fn(params)
}

// UserAttemptAttemptIDAnswerPutHandler interface for that can handle valid user attempt attempt Id answer put params
type UserAttemptAttemptIDAnswerPutHandler interface {
	Handle(UserAttemptAttemptIDAnswerPutParams) middleware.Responder
}

// NewUserAttemptAttemptIDAnswerPut creates a new http.Handler for the user attempt attempt Id answer put operation
func NewUserAttemptAttemptIDAnswerPut(ctx *middleware.Context, handler UserAttemptAttemptIDAnswerPutHandler) *UserAttemptAttemptIDAnswerPut {
	return &UserAttemptAttemptIDAnswerPut{Context: ctx, Handler: handler}
}

/*
	UserAttemptAttemptIDAnswerPut swagger:route PUT /user/attempt/{attempt_id}/answer user userAttemptAttemptIdAnswerPut

Запрос на заполнение ответами попытки прохождения теста
*/
type UserAttemptAttemptIDAnswerPut struct {
	Context *middleware.Context
	Handler UserAttemptAttemptIDAnswerPutHandler
}

func (o *UserAttemptAttemptIDAnswerPut) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUserAttemptAttemptIDAnswerPutParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UserAttemptAttemptIDAnswerPutBody user attempt attempt ID answer put body
//
// swagger:model UserAttemptAttemptIDAnswerPutBody
type UserAttemptAttemptIDAnswerPutBody struct {

	// question id
	QuestionID uint64 `json:"question_id,omitempty"`

	// user answer
	UserAnswer []*int64 `json:"user_answer"`
}

// Validate validates this user attempt attempt ID answer put body
func (o *UserAttemptAttemptIDAnswerPutBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUserAnswer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UserAttemptAttemptIDAnswerPutBody) validateUserAnswer(formats strfmt.Registry) error {
	if swag.IsZero(o.UserAnswer) { // not required
		return nil
	}

	for i := 0; i < len(o.UserAnswer); i++ {
		if swag.IsZero(o.UserAnswer[i]) { // not required
			continue
		}

		if err := validate.MinimumInt("body"+"."+"user_answer"+"."+strconv.Itoa(i), "body", *o.UserAnswer[i], 0, false); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this user attempt attempt ID answer put body based on context it is used
func (o *UserAttemptAttemptIDAnswerPutBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserAttemptAttemptIDAnswerPutBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserAttemptAttemptIDAnswerPutBody) UnmarshalBinary(b []byte) error {
	var res UserAttemptAttemptIDAnswerPutBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
