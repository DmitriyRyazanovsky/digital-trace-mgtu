// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserProfileHandlerFunc turns a function with the right signature into a user profile handler
type UserProfileHandlerFunc func(UserProfileParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UserProfileHandlerFunc) Handle(params UserProfileParams) middleware.Responder {
	return fn(params)
}

// UserProfileHandler interface for that can handle valid user profile params
type UserProfileHandler interface {
	Handle(UserProfileParams) middleware.Responder
}

// NewUserProfile creates a new http.Handler for the user profile operation
func NewUserProfile(ctx *middleware.Context, handler UserProfileHandler) *UserProfile {
	return &UserProfile{Context: ctx, Handler: handler}
}

/*
UserProfile swagger:route GET /user/profile user userProfile

Запрос на поиск информации о пользователях
*/
type UserProfile struct {
	Context *middleware.Context
	Handler UserProfileHandler
}

func (o *UserProfile) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUserProfileParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UserProfileOKBody user profile o k body
//
// swagger:model UserProfileOKBody
type UserProfileOKBody struct {

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// id
	ID uint64 `json:"id,omitempty"`

	// login
	Login string `json:"login,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// role id
	RoleID uint64 `json:"role_id,omitempty"`

	// surname
	Surname string `json:"surname,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
}

// Validate validates this user profile o k body
func (o *UserProfileOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UserProfileOKBody) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(o.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("userProfileOK"+"."+"created_at", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *UserProfileOKBody) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(o.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("userProfileOK"+"."+"updated_at", "body", "date-time", o.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UserProfileOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserProfileOKBody) UnmarshalBinary(b []byte) error {
	var res UserProfileOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
