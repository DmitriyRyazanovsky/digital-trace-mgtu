// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UserProfilePatchHandlerFunc turns a function with the right signature into a user profile patch handler
type UserProfilePatchHandlerFunc func(UserProfilePatchParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UserProfilePatchHandlerFunc) Handle(params UserProfilePatchParams) middleware.Responder {
	return fn(params)
}

// UserProfilePatchHandler interface for that can handle valid user profile patch params
type UserProfilePatchHandler interface {
	Handle(UserProfilePatchParams) middleware.Responder
}

// NewUserProfilePatch creates a new http.Handler for the user profile patch operation
func NewUserProfilePatch(ctx *middleware.Context, handler UserProfilePatchHandler) *UserProfilePatch {
	return &UserProfilePatch{Context: ctx, Handler: handler}
}

/*
UserProfilePatch swagger:route PATCH /user/profile user userProfilePatch

Запрос на изменение данных о пользователе
*/
type UserProfilePatch struct {
	Context *middleware.Context
	Handler UserProfilePatchHandler
}

func (o *UserProfilePatch) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUserProfilePatchParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
