// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserPostHandlerFunc turns a function with the right signature into a user post handler
type UserPostHandlerFunc func(UserPostParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UserPostHandlerFunc) Handle(params UserPostParams) middleware.Responder {
	return fn(params)
}

// UserPostHandler interface for that can handle valid user post params
type UserPostHandler interface {
	Handle(UserPostParams) middleware.Responder
}

// NewUserPost creates a new http.Handler for the user post operation
func NewUserPost(ctx *middleware.Context, handler UserPostHandler) *UserPost {
	return &UserPost{Context: ctx, Handler: handler}
}

/*
	UserPost swagger:route POST /user user userPost

Запрос на добавление нового пользователя
*/
type UserPost struct {
	Context *middleware.Context
	Handler UserPostHandler
}

func (o *UserPost) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUserPostParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UserPostBody user post body
//
// swagger:model UserPostBody
type UserPostBody struct {

	// email
	// Required: true
	Email *string `json:"email"`

	// login
	// Required: true
	Login *string `json:"login"`

	// name
	// Required: true
	Name *string `json:"name"`

	// password
	// Required: true
	Password *string `json:"password"`

	// role id
	// Required: true
	RoleID *uint64 `json:"role_id"`

	// surname
	// Required: true
	Surname *string `json:"surname"`
}

// Validate validates this user post body
func (o *UserPostBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLogin(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoleID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSurname(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UserPostBody) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"email", "body", o.Email); err != nil {
		return err
	}

	return nil
}

func (o *UserPostBody) validateLogin(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"login", "body", o.Login); err != nil {
		return err
	}

	return nil
}

func (o *UserPostBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *UserPostBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"password", "body", o.Password); err != nil {
		return err
	}

	return nil
}

func (o *UserPostBody) validateRoleID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"role_id", "body", o.RoleID); err != nil {
		return err
	}

	return nil
}

func (o *UserPostBody) validateSurname(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"surname", "body", o.Surname); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user post body based on context it is used
func (o *UserPostBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserPostBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserPostBody) UnmarshalBinary(b []byte) error {
	var res UserPostBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UserPostOKBody user post o k body
//
// swagger:model UserPostOKBody
type UserPostOKBody struct {

	// user id
	UserID uint64 `json:"user_id,omitempty"`
}

// Validate validates this user post o k body
func (o *UserPostOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user post o k body based on context it is used
func (o *UserPostOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserPostOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserPostOKBody) UnmarshalBinary(b []byte) error {
	var res UserPostOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
